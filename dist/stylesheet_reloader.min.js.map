{"version":3,"sources":["stylesheet_reloader.coffee","stylesheet_reloader.js"],"names":["hasProp","hasOwnProperty","window","StyleSheetReloader","options","hotKeyPressed","prepareOptions","hotKey","event","i","key","len","result","split","length","trim","toLowerCase","keyCode","toUpperCase","charCodeAt","document","addEventListener","e","reload","cssUrl","parseJson","defaultOptions","error","json","optionDefaultValue","optionKey","JSON","parse","_error","console","log","call","addParameter","href","hrefLastChar","link","links","replacedLinks","replacedVersion","querySelectorAll","getAttribute","indexOf","substr","Date","now","setAttribute","runByTagParams","results","script","scripts","push","this"],"mappings":"CAAA,WAAA,GAAAA,MAAAC,cAIAC,QAAOC,mBAAqB,SAACC,GAC5B,GAAAC,EC4BG,OD5BHD,GAAUF,OAAOC,mBAAmBG,eAAeF,GAEnDC,EAAgB,SAACE,EAAOC,GACvB,GAAAC,GAAAC,EAAAC,EAAAC,CAEA,KAFAL,EAASA,EAAOM,MAAM,KACtBD,GAAS,EACTH,EAAA,EAAAE,EAAAJ,EAAAO,OAAAH,EAAAF,EAAAA,IACC,GCMKC,EAAMH,EAAOE,GDNfC,EAAIK,OAAOD,OAEb,GADAJ,EAAMA,EAAIK,OAAOC,cACN,QAARN,GAAc,SAAdA,GAAqB,UAArBA,GACF,IAAIF,EAAME,EAAI,OACb,OAAO,MAER,IAAGF,EAAMS,UAAWP,EAAIQ,cAAcC,WAAW,GAChD,OAAO,CACX,OAAOP,IAERQ,SAASC,iBAAiB,UAAW,SAACC,GACrC,MAAGjB,GAAcD,EAAQG,OAAOe,GAC/BpB,OAAOC,mBAAmBoB,OAAOnB,EAAQoB,QAD1C,UAKFtB,OAAOC,mBAAmBG,eAAiB,SAACF,EAAeqB,GAC1D,GAAAC,GAAAC,EAAAC,EAAAC,EAAAC,CAIA,ICUkB,MAAX1B,IDfoCA,GAAQ,GCkB/B,MAAbqB,IDlBmDA,GAAU,GACpEC,GACCF,QAAQ,EACPjB,OAAQ,SAEPkB,GAAarB,GAAWA,EAAQU,OAClC,IACCc,EAAOG,KAAKC,MAAM5B,GAClBA,EAAUwB,EAFX,MAAAK,GAGMN,EAAAM,EACLC,QAAQC,IAAIR,GACO,gBAAXvB,KACTA,GACCoB,OAAQpB,IAEW,gBAAXA,KACTA,KACD,KAAA0B,IAAAJ,GC0BU1B,EAAQoC,KAAKV,EAAgBI,KAClCD,EAAqBH,EAAeI,GD1BpC1B,EAAQ0B,KACX1B,EAAQ0B,GAAaJ,EAAeI,IAGtC,OAFG1B,GAAQoB,SAAWpB,EAAQoB,OAAOV,SACpCV,EAAQoB,QAAS,GACXpB,GAGRF,OAAOC,mBAAmBoB,OAAS,SAACC,GACnC,GAAAa,GAAAC,EAAAC,EAAA9B,EAAAE,EAAA6B,EAAAC,EAAAC,EAAAC,CAIA,KC2BiB,MAAVnB,IDhC4BA,GAAO,GAC1CkB,EAAgB,EACI,gBAAVlB,IAAuBA,EAAOV,SACvCU,GAAS,GACViB,EAAQrB,SAASwB,iBAAiB,8BAClCnC,EAAA,EAAAE,EAAA8B,EAAA3B,OAAAH,EAAAF,EAAAA,ICoCK+B,EAAOC,EAAMhC,GDnCjB6B,EAAOE,EAAKK,aAAa,SACtBP,IAAQA,EAAKxB,QAAYU,GAAgC,KAAtBc,EAAKQ,QAAQtB,KAClDc,EAAOA,EAAKzB,MAAM,mBAAmB,GACrC0B,EAAeD,EAAKS,OAAOT,EAAKxB,OAAO,IACtB,MAAdyB,GAAmC,MAAdA,KACvBD,EAAOA,EAAKS,OAAO,EAAET,EAAKxB,OAAO,IAClC6B,EAAkBK,KAAKC,MACvBZ,EAAe,IACO,KAAnBC,EAAKQ,QAAQ,OACfT,EAAe,KAChBC,GAAOD,EAAe,mBAAqBM,EAC3CH,EAAKU,aAAa,OAAOZ,GACzBI,IACF,OAAOA,IAGRxC,OAAOC,mBAAmBgD,eAAiB,WAC1C,GAAA1C,GAAAE,EAAAP,EAAAgD,EAAAC,EAAAC,CC2CG,KD3CHA,EAAUlC,SAASwB,iBAAiB,mCACpCQ,KAAA3C,EAAA,EAAAE,EAAA2C,EAAAxC,OAAAH,EAAAF,EAAAA,IC2CK4C,EAASC,EAAQ7C,GD1CrBL,EAAUF,OAAOC,mBAAmBG,eAAe+C,EAAOR,aAAa,4BAA2B,GC4C9FO,EAAQG,KD3CZrD,OAAOC,mBAAmBC,GC6CxB,OAAOgD,ID3CXlD,OAAOC,mBAAmBgD,mBCgDvBf,KAAKoB","file":"stylesheet_reloader.min.js","sourcesContent":["###*\r\n * StyleSheetReloader v 1.0\r\n * Author: Vlad Tokarev <vlad@tokarev.tk>\r\n###\r\nwindow.StyleSheetReloader = (options)->\r\n\toptions = window.StyleSheetReloader.prepareOptions(options)\r\n\t# Detects if HotKey is pressed\r\n\thotKeyPressed = (hotKey,event)->\r\n\t\thotKey = hotKey.split('+')\r\n\t\tresult = true\r\n\t\tfor key in hotKey\r\n\t\t\tif key.trim().length\r\n\t\t\t\tkey = key.trim().toLowerCase()\r\n\t\t\t\tif key in ['alt','ctrl','shift']\r\n\t\t\t\t\tif !event[key+'Key']\r\n\t\t\t\t\t\treturn false\r\n\t\t\t\telse\r\n\t\t\t\t\tif event.keyCode != key.toUpperCase().charCodeAt(0)\r\n\t\t\t\t\t\treturn false\r\n\t\treturn result\r\n\t# Adds key pressed event listener\r\n\tdocument.addEventListener('keydown', (e)->\r\n\t\tif hotKeyPressed(options.hotKey,e)\r\n\t\t\twindow.StyleSheetReloader.reload(options.cssUrl)\r\n\t)\r\n\r\n# Prepare options\r\nwindow.StyleSheetReloader.prepareOptions = (options=false, parseJson=false)->\r\n\tdefaultOptions = {\r\n\t\tcssUrl: false\r\n\t\t,hotKey: 'alt+r'\r\n\t}\r\n\tif parseJson && options && options.length\r\n\t\ttry\r\n\t\t\tjson = JSON.parse(options)\r\n\t\t\toptions = json\r\n\t\tcatch error\r\n\t\t\tconsole.log(error)\r\n\tif typeof options is 'string'\r\n\t\toptions = {\r\n\t\t\tcssUrl: options\r\n\t\t}\r\n\tif typeof options != 'object'\r\n\t\toptions = {}\r\n\tfor own optionKey,optionDefaultValue of defaultOptions\r\n\t\tif !options[optionKey]\r\n\t\t\toptions[optionKey] = defaultOptions[optionKey]\r\n\tif options.cssUrl && !options.cssUrl.length\r\n\t\toptions.cssUrl = false\r\n\treturn options\r\n\r\n# Changes links href with replacedVersion get parameter\r\nwindow.StyleSheetReloader.reload = (cssUrl=false)->\r\n\treplacedLinks = 0\r\n\tif typeof cssUrl is 'string' && !cssUrl.length\r\n\t\tcssUrl = false\r\n\tlinks = document.querySelectorAll('link[rel=stylesheet][href]')\r\n\tfor link in links\r\n\t\thref = link.getAttribute('href')\r\n\t\tif href && href.length && (!cssUrl || href.indexOf(cssUrl)!=-1)\r\n\t\t\thref = href.split('replacedVersion')[0]\r\n\t\t\threfLastChar = href.substr(href.length-1)\r\n\t\t\tif hrefLastChar=='?' || hrefLastChar=='&'\r\n\t\t\t\thref = href.substr(0,href.length-1)\r\n\t\t\treplacedVersion = Date.now()\r\n\t\t\taddParameter = '?'\r\n\t\t\tif href.indexOf('?')!=-1\r\n\t\t\t\taddParameter = '&'\r\n\t\t\thref+= addParameter + 'replacedVersion=' + replacedVersion\r\n\t\t\tlink.setAttribute('href',href)\r\n\t\t\treplacedLinks++\r\n\treturn replacedLinks\r\n\r\n# Searching for running by tag parameters\r\nwindow.StyleSheetReloader.runByTagParams = ()->\r\n\tscripts = document.querySelectorAll('script[data-stylesheetReloader]')\r\n\tfor script in scripts\r\n\t\toptions = window.StyleSheetReloader.prepareOptions(script.getAttribute('data-stylesheetReloader'),true)\r\n\t\twindow.StyleSheetReloader(options)\r\n\r\nwindow.StyleSheetReloader.runByTagParams()","\n/**\n * StyleSheetReloader v 1.0\n * Author: Vlad Tokarev <vlad@tokarev.tk>\n */\n\n(function() {\n  var hasProp = {}.hasOwnProperty;\n\n  window.StyleSheetReloader = function(options) {\n    var hotKeyPressed;\n    options = window.StyleSheetReloader.prepareOptions(options);\n    hotKeyPressed = function(hotKey, event) {\n      var i, key, len, result;\n      hotKey = hotKey.split('+');\n      result = true;\n      for (i = 0, len = hotKey.length; i < len; i++) {\n        key = hotKey[i];\n        if (key.trim().length) {\n          key = key.trim().toLowerCase();\n          if (key === 'alt' || key === 'ctrl' || key === 'shift') {\n            if (!event[key + 'Key']) {\n              return false;\n            }\n          } else {\n            if (event.keyCode !== key.toUpperCase().charCodeAt(0)) {\n              return false;\n            }\n          }\n        }\n      }\n      return result;\n    };\n    return document.addEventListener('keydown', function(e) {\n      if (hotKeyPressed(options.hotKey, e)) {\n        return window.StyleSheetReloader.reload(options.cssUrl);\n      }\n    });\n  };\n\n  window.StyleSheetReloader.prepareOptions = function(options, parseJson) {\n    var defaultOptions, error, json, optionDefaultValue, optionKey;\n    if (options == null) {\n      options = false;\n    }\n    if (parseJson == null) {\n      parseJson = false;\n    }\n    defaultOptions = {\n      cssUrl: false,\n      hotKey: 'alt+r'\n    };\n    if (parseJson && options && options.length) {\n      try {\n        json = JSON.parse(options);\n        options = json;\n      } catch (_error) {\n        error = _error;\n        console.log(error);\n      }\n    }\n    if (typeof options === 'string') {\n      options = {\n        cssUrl: options\n      };\n    }\n    if (typeof options !== 'object') {\n      options = {};\n    }\n    for (optionKey in defaultOptions) {\n      if (!hasProp.call(defaultOptions, optionKey)) continue;\n      optionDefaultValue = defaultOptions[optionKey];\n      if (!options[optionKey]) {\n        options[optionKey] = defaultOptions[optionKey];\n      }\n    }\n    if (options.cssUrl && !options.cssUrl.length) {\n      options.cssUrl = false;\n    }\n    return options;\n  };\n\n  window.StyleSheetReloader.reload = function(cssUrl) {\n    var addParameter, href, hrefLastChar, i, len, link, links, replacedLinks, replacedVersion;\n    if (cssUrl == null) {\n      cssUrl = false;\n    }\n    replacedLinks = 0;\n    if (typeof cssUrl === 'string' && !cssUrl.length) {\n      cssUrl = false;\n    }\n    links = document.querySelectorAll('link[rel=stylesheet][href]');\n    for (i = 0, len = links.length; i < len; i++) {\n      link = links[i];\n      href = link.getAttribute('href');\n      if (href && href.length && (!cssUrl || href.indexOf(cssUrl) !== -1)) {\n        href = href.split('replacedVersion')[0];\n        hrefLastChar = href.substr(href.length - 1);\n        if (hrefLastChar === '?' || hrefLastChar === '&') {\n          href = href.substr(0, href.length - 1);\n        }\n        replacedVersion = Date.now();\n        addParameter = '?';\n        if (href.indexOf('?') !== -1) {\n          addParameter = '&';\n        }\n        href += addParameter + 'replacedVersion=' + replacedVersion;\n        link.setAttribute('href', href);\n        replacedLinks++;\n      }\n    }\n    return replacedLinks;\n  };\n\n  window.StyleSheetReloader.runByTagParams = function() {\n    var i, len, options, results, script, scripts;\n    scripts = document.querySelectorAll('script[data-stylesheetReloader]');\n    results = [];\n    for (i = 0, len = scripts.length; i < len; i++) {\n      script = scripts[i];\n      options = window.StyleSheetReloader.prepareOptions(script.getAttribute('data-stylesheetReloader'), true);\n      results.push(window.StyleSheetReloader(options));\n    }\n    return results;\n  };\n\n  window.StyleSheetReloader.runByTagParams();\n\n}).call(this);\n"],"sourceRoot":"/source/"}