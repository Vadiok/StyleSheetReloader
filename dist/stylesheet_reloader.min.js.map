{"version":3,"sources":["stylesheet_reloader.coffee","stylesheet_reloader.js"],"names":["hasProp","hasOwnProperty","window","StyleSheetReloader","options","defaultOptions","hotKeyPressed","optionDefaultValue","optionKey","runChange","cssUrl","hotKey","call","addParameter","href","hrefLastChar","i","len","link","links","replacedLinks","replacedVersion","document","querySelectorAll","length","getAttribute","indexOf","split","substr","Date","now","setAttribute","event","key","result","trim","toLowerCase","keyCode","toUpperCase","charCodeAt","onkeydown","e","runByTagParams","error","json","results","script","scripts","JSON","parse","_error","push","this"],"mappings":"CAAA,WAAA,GAAAA,MAAAC,cAIAC,QAAOC,mBAAqB,SAACC,GAC5B,GAAAC,GAAAC,EAAAC,EAAAC,EAAAC,CAAAJ,IACCK,QAAQ,EACPC,OAAQ,SAEW,gBAAXP,KACTA,GACCM,OAAON,IAEY,gBAAXA,KACTA,KACD,KAAAI,IAAAH,GCSUL,EAAQY,KAAKP,EAAgBG,KAClCD,EAAqBF,EAAeG,GDTpCJ,EAAQI,KACXJ,EAAQI,GAAaH,EAAeG,IC2DnC,ODzDHC,GAAY,SAACC,GACZ,GAAAG,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,CAEA,KAFAD,EAAgB,EAChBD,EAAQG,SAASC,iBAAiB,8BAClCP,EAAA,EAAAC,EAAAE,EAAAK,OAAAP,EAAAD,EAAAA,ICaME,EAAOC,EAAMH,GDZlBF,EAAOI,EAAKO,aAAa,SACtBX,IAAQA,EAAKU,QAAYd,GAAgC,KAAtBI,EAAKY,QAAQhB,KAClDI,EAAOA,EAAKa,MAAM,mBAAmB,GACrCZ,EAAeD,EAAKc,OAAOd,EAAKU,OAAO,IACtB,MAAdT,GAAmC,MAAdA,KACvBD,EAAOA,EAAKc,OAAO,EAAEd,EAAKU,OAAO,IAClCH,EAAkBQ,KAAKC,MACvBjB,EAAe,IACO,KAAnBC,EAAKY,QAAQ,OACfb,EAAe,KAChBC,GAAOD,EAAe,mBAAqBQ,EAC3CH,EAAKa,aAAa,OAAOjB,GACzBM,IACF,OAAOA,IAERd,EAAgB,SAACK,EAAOqB,GACvB,GAAAhB,GAAAiB,EAAAhB,EAAAiB,CAEA,KAFAvB,EAASA,EAAOgB,MAAM,KACtBO,GAAS,EACTlB,EAAA,EAAAC,EAAAN,EAAAa,OAAAP,EAAAD,EAAAA,IACC,GCkBKiB,EAAMtB,EAAOK,GDlBfiB,EAAIE,OAAOX,OAEb,GADAS,EAAMA,EAAIE,OAAOC,cACN,QAARH,GAAc,SAAdA,GAAqB,UAArBA,GACF,IAAID,EAAMC,EAAI,OACb,OAAO,MAER,IAAGD,EAAMK,UAAWJ,EAAIK,cAAcC,WAAW,GAChD,OAAO,CACX,OAAOL,IAERZ,SAASkB,UAAY,SAACC,GACrB,MAAGnC,GAAcF,EAAQO,OAAO8B,GAC/BhC,EAAUL,EAAQM,QADnB,SAIFR,OAAOC,mBAAmBuC,eAAiB,WAC1C,GAAAC,GAAA3B,EAAA4B,EAAA3B,EAAAb,EAAAyC,EAAAC,EAAAC,CC6BG,KD7BHA,EAAUzB,SAASC,iBAAiB,mCAEpCsB,KAAA7B,EAAA,EAAAC,EAAA8B,EAAAvB,OAAAP,EAAAD,EAAAA,IAAA,CC4BK8B,EAASC,EAAQ/B,GD3BrBZ,EAAU0C,EAAOrB,aAAa,0BAC9B,KACCmB,EAAOI,KAAKC,MAAM7C,GAClBA,EAAUwC,EAFX,MAAAM,GAGMP,EAAAO,EC+BFL,EAAQM,KD9BZjD,OAAOC,mBAAmBC,ICgCxB,MAAOyC,ID9BX3C,OAAOC,mBAAmBuC,mBCmCvB9B,KAAKwC","file":"stylesheet_reloader.min.js","sourcesContent":["###*\r\n * StyleSheetReloader v 1.0\r\n * Author: Vlad Tokarev <vlad@tokarev.tk>\r\n###\r\nwindow.StyleSheetReloader = (options)->\r\n\tdefaultOptions = {\r\n\t\tcssUrl: false\r\n\t\t,hotKey: 'alt+r'\r\n\t}\r\n\tif typeof options is 'string'\r\n\t\toptions = {\r\n\t\t\tcssUrl:options\r\n\t\t}\r\n\tif typeof options != 'object'\r\n\t\toptions = {}\r\n\tfor own optionKey,optionDefaultValue of defaultOptions\r\n\t\tif !options[optionKey]\r\n\t\t\toptions[optionKey] = defaultOptions[optionKey]\r\n\t# Changes links href with replacedVersion get parameter\r\n\trunChange = (cssUrl)->\r\n\t\treplacedLinks = 0\r\n\t\tlinks = document.querySelectorAll('link[rel=stylesheet][href]')\r\n\t\tfor link in links\r\n\t\t\thref = link.getAttribute('href')\r\n\t\t\tif href && href.length && (!cssUrl || href.indexOf(cssUrl)!=-1)\r\n\t\t\t\thref = href.split('replacedVersion')[0]\r\n\t\t\t\threfLastChar = href.substr(href.length-1)\r\n\t\t\t\tif hrefLastChar=='?' || hrefLastChar=='&'\r\n\t\t\t\t\thref = href.substr(0,href.length-1)\r\n\t\t\t\treplacedVersion = Date.now()\r\n\t\t\t\taddParameter = '?'\r\n\t\t\t\tif href.indexOf('?')!=-1\r\n\t\t\t\t\taddParameter = '&'\r\n\t\t\t\thref+= addParameter + 'replacedVersion=' + replacedVersion\r\n\t\t\t\tlink.setAttribute('href',href)\r\n\t\t\t\treplacedLinks++\r\n\t\treturn replacedLinks\r\n\t# Detects if HotKey is pressed\r\n\thotKeyPressed = (hotKey,event)->\r\n\t\thotKey = hotKey.split('+')\r\n\t\tresult = true\r\n\t\tfor key in hotKey\r\n\t\t\tif key.trim().length\r\n\t\t\t\tkey = key.trim().toLowerCase()\r\n\t\t\t\tif key in ['alt','ctrl','shift']\r\n\t\t\t\t\tif !event[key+'Key']\r\n\t\t\t\t\t\treturn false\r\n\t\t\t\telse\r\n\t\t\t\t\tif event.keyCode != key.toUpperCase().charCodeAt(0)\r\n\t\t\t\t\t\treturn false\r\n\t\treturn result\r\n\t# Listening key pressed event\r\n\tdocument.onkeydown = (e)->\r\n\t\tif hotKeyPressed(options.hotKey,e)\r\n\t\t\trunChange(options.cssUrl)\r\n\r\n# Searching for running by tag parameters\r\nwindow.StyleSheetReloader.runByTagParams = ()->\r\n\tscripts = document.querySelectorAll('script[data-stylesheetReloader]')\r\n\t# preventing of several times running\r\n\tfor script in scripts\r\n\t\toptions = script.getAttribute('data-stylesheetReloader')\r\n\t\ttry\r\n\t\t\tjson = JSON.parse(options)\r\n\t\t\toptions = json\r\n\t\tcatch error\r\n\t\twindow.StyleSheetReloader(options)\r\n\r\nwindow.StyleSheetReloader.runByTagParams()","\n/**\n * StyleSheetReloader v 1.0\n * Author: Vlad Tokarev <vlad@tokarev.tk>\n */\n\n(function() {\n  var hasProp = {}.hasOwnProperty;\n\n  window.StyleSheetReloader = function(options) {\n    var defaultOptions, hotKeyPressed, optionDefaultValue, optionKey, runChange;\n    defaultOptions = {\n      cssUrl: false,\n      hotKey: 'alt+r'\n    };\n    if (typeof options === 'string') {\n      options = {\n        cssUrl: options\n      };\n    }\n    if (typeof options !== 'object') {\n      options = {};\n    }\n    for (optionKey in defaultOptions) {\n      if (!hasProp.call(defaultOptions, optionKey)) continue;\n      optionDefaultValue = defaultOptions[optionKey];\n      if (!options[optionKey]) {\n        options[optionKey] = defaultOptions[optionKey];\n      }\n    }\n    runChange = function(cssUrl) {\n      var addParameter, href, hrefLastChar, i, len, link, links, replacedLinks, replacedVersion;\n      replacedLinks = 0;\n      links = document.querySelectorAll('link[rel=stylesheet][href]');\n      for (i = 0, len = links.length; i < len; i++) {\n        link = links[i];\n        href = link.getAttribute('href');\n        if (href && href.length && (!cssUrl || href.indexOf(cssUrl) !== -1)) {\n          href = href.split('replacedVersion')[0];\n          hrefLastChar = href.substr(href.length - 1);\n          if (hrefLastChar === '?' || hrefLastChar === '&') {\n            href = href.substr(0, href.length - 1);\n          }\n          replacedVersion = Date.now();\n          addParameter = '?';\n          if (href.indexOf('?') !== -1) {\n            addParameter = '&';\n          }\n          href += addParameter + 'replacedVersion=' + replacedVersion;\n          link.setAttribute('href', href);\n          replacedLinks++;\n        }\n      }\n      return replacedLinks;\n    };\n    hotKeyPressed = function(hotKey, event) {\n      var i, key, len, result;\n      hotKey = hotKey.split('+');\n      result = true;\n      for (i = 0, len = hotKey.length; i < len; i++) {\n        key = hotKey[i];\n        if (key.trim().length) {\n          key = key.trim().toLowerCase();\n          if (key === 'alt' || key === 'ctrl' || key === 'shift') {\n            if (!event[key + 'Key']) {\n              return false;\n            }\n          } else {\n            if (event.keyCode !== key.toUpperCase().charCodeAt(0)) {\n              return false;\n            }\n          }\n        }\n      }\n      return result;\n    };\n    return document.onkeydown = function(e) {\n      if (hotKeyPressed(options.hotKey, e)) {\n        return runChange(options.cssUrl);\n      }\n    };\n  };\n\n  window.StyleSheetReloader.runByTagParams = function() {\n    var error, i, json, len, options, results, script, scripts;\n    scripts = document.querySelectorAll('script[data-stylesheetReloader]');\n    results = [];\n    for (i = 0, len = scripts.length; i < len; i++) {\n      script = scripts[i];\n      options = script.getAttribute('data-stylesheetReloader');\n      try {\n        json = JSON.parse(options);\n        options = json;\n      } catch (_error) {\n        error = _error;\n      }\n      results.push(window.StyleSheetReloader(options));\n    }\n    return results;\n  };\n\n  window.StyleSheetReloader.runByTagParams();\n\n}).call(this);\n"],"sourceRoot":"/source/"}